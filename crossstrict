Q:=Rationals();

RC := function(n)
        x := Random([-1000*n..1000*n]);
            return (Q!x)/1000;
end function;

master:=[];

dist := function(a,b,c)
	d:=0;
	aa:=Round(a); aaa:=a-aa;
	bb:=Round(b); bbb:=b-bb;
	cc:=Round(c); ccc:=c-cc;
	if ((aa + bb + cc) mod 2) eq 0 then
		d:=AbsoluteValue(aaa) + AbsoluteValue(bbb) + AbsoluteValue(ccc);
		end if;
	if d eq 0 then
		vec:=[Abs(aaa),Abs(bbb),Abs(ccc)];
		e,f:=Maximum(vec);
		d:=Abs(aaa)+Abs(bbb)+Abs(ccc) + 1 - 2*e;
		end if;
	return(d);
end function;

load "datacross";
print("the length of the data is");
#triples;
print("now going through 1000 terms at a time");

master:=[];
	
for i in [1..#triples] do
v:=triples[i];
if (i mod 1000) eq 0 then
	i;
	end if;
a:=v[1];
b:=v[2];
c:=v[3];
if a*b*c ne 0 then
	p:=b*c;
	q:=a*c;
	r:=a*b;
	d:=GCD([p,q,r]);
	p:=p div d;
	q:=q div d;
	r:=r div d;
	n:=LCM([p,q,r]);
	moretesting:=0;
	for l in [1..1000] do
		if moretesting eq 0 then
			k:=RC(n);
			if dist(k/p,k/q,k/r) ge 29/24 then
				moretesting:=1;
				end if;
			end if;
		end for;
	if moretesting eq 0 then
		if [1/p,1/q,1/r] notin master then
			print("new example");
			[1/p,1/q,1/r];
			master:=Append(master,[1/p,1/q,1/r]);
				end if;
			end if;
		end if;
	end for;




				
	







